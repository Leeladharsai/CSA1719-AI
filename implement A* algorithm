import heapq

class Node:
    def _init_(self, state, parent=None, g_cost=0, h_cost=0):
        self.state = state
        self.parent = parent
        self.g_cost = g_cost  
        self.h_cost = h_cost  

    def _lt_(self, other):
        return (self.g_cost + self.h_cost) < (other.g_cost + other.h_cost)

def astar_search(start_state, goal_state, graph, heuristic):
    open_set = []
    closed_set = set()

    start_node = Node(start_state, None, 0, heuristic(start_state, goal_state))
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for neighbor, cost in graph[current_node.state].items():
            if neighbor in closed_set:
                continue

            g_cost = current_node.g_cost + cost
            h_cost = heuristic(neighbor, goal_state)
            neighbor_node = Node(neighbor, current_node, g_cost, h_cost)

            if neighbor_node not in open_set:
                heapq.heappush(open_set, neighbor_node)
            else:
                
                for node in open_set:
                    if node.state == neighbor and g_cost < node.g_cost:
                        node.g_cost = g_cost
                        node.parent = current_node
                        break

    return None  

graph = {
    'A': {'B': 5, 'C': 10},
    'B': {'A': 5, 'D': 7, 'E': 3},
    'C': {'A': 10, 'D': 1},
    'D': {'B': 7, 'C': 1, 'F': 5},
    'E': {'B': 3, 'F': 8},
    'F': {'D': 5, 'E': 8}
}

heuristic = lambda state, goal: abs(ord(state) - ord(goal))  

start_state = 'A'
goal_state = 'F'

path = astar_search(start_state, goal_state, graph, heuristic)
if path:
    print("A* Path:", path)
else:
    print("No path found.")
